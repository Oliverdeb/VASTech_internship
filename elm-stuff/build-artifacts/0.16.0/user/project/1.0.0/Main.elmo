Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $DataModelViewer = Elm.DataModelViewer.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StructureDecoder = Elm.StructureDecoder.make(_elm),
   $ValueParser = Elm.ValueParser.make(_elm);
   var _op = {};
   var initialDataModel = {datamodel: $StructureDecoder.getModel
                          ,values: $ValueParser.getValues};
   var update = F2(function (action,model) {
      var _p0 = action;
      if (_p0.ctor === "NoOp") {
            return model;
         } else {
            return A2($DataModelViewer.update,_p0._0,model);
         }
   });
   var NoOp = {ctor: "NoOp"};
   var actions = $Signal.mailbox(NoOp);
   var model = A3($Signal.foldp,
   update,
   initialDataModel,
   actions.signal);
   var ModifyModel = function (a) {
      return {ctor: "ModifyModel",_0: a};
   };
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($DataModelViewer.view,
      A2($Signal.forwardTo,address,ModifyModel),
      model)]));
   });
   var main = A2($Signal.map,view(actions.address),model);
   return _elm.Main.values = {_op: _op
                             ,ModifyModel: ModifyModel
                             ,NoOp: NoOp
                             ,update: update
                             ,view: view
                             ,initialDataModel: initialDataModel
                             ,model: model
                             ,actions: actions
                             ,main: main};
};