Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Decoder = Elm.Decoder.make(_elm),
   $Fields = Elm.Fields.make(_elm),
   $Html = Elm.Html.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var showField = function (field) {
      return A2($Html.div,
      _U.list([]),
      _U.list([$Html.text(field.name)]));
   };
   var newDataType = {name: "new type",fields: $Fields.init};
   var update = F2(function (action,model) {
      var _p0 = action;
      switch (_p0.ctor)
      {case "NoOp": return model;
         case "AddType": return _U.update(model,
           {dataTypes: A2($Basics._op["++"],
           model.dataTypes,
           _U.list([newDataType]))});
         case "RemoveType": return _U.update(model,
           {dataTypes: A2($List.filter,
           function (datatype) {
              return !_U.eq(datatype.name,_p0._0);
           },
           model.dataTypes)});
         default: var updateDataType = function (datatype) {
              return _U.eq(datatype.name,_p0._0) ? _U.update(datatype,
              {fields: A2($Fields.update,_p0._1,datatype.fields)}) : datatype;
           };
           return _U.update(model,
           {dataTypes: A2($List.map,updateDataType,model.dataTypes)});}
   });
   var NoOp = {ctor: "NoOp"};
   var actions = $Signal.mailbox(NoOp);
   var model = A3($Signal.foldp,
   update,
   $Decoder.getModel,
   actions.signal);
   var ModifyType = F2(function (a,b) {
      return {ctor: "ModifyType",_0: a,_1: b};
   });
   var checkType = F2(function (address,datatype) {
      return _U.eq(datatype.name,"Server") ? A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.h1,
              _U.list([]),
              _U.list([$Html.text(datatype.name)]))
              ,A2($Fields.view,
              A2($Signal.forwardTo,address,ModifyType(datatype.name)),
              datatype.fields)
              ,A2($Html.br,_U.list([]),_U.list([]))])) : A2($Html.div,
      _U.list([]),
      _U.list([]));
   });
   var setupForm = F2(function (address,datatypes) {
      return A2($Html.div,
      _U.list([]),
      A2($List.map,checkType(address),datatypes));
   });
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([]),
      _U.list([A2(setupForm,address,model.dataTypes)
              ,A2($Html.br,_U.list([]),_U.list([]))]));
   });
   var main = A2($Signal.map,view(actions.address),model);
   var AddType = {ctor: "AddType"};
   var RemoveType = function (a) {
      return {ctor: "RemoveType",_0: a};
   };
   return _elm.Main.values = {_op: _op
                             ,RemoveType: RemoveType
                             ,AddType: AddType
                             ,ModifyType: ModifyType
                             ,NoOp: NoOp
                             ,newDataType: newDataType
                             ,update: update
                             ,view: view
                             ,setupForm: setupForm
                             ,checkType: checkType
                             ,showField: showField
                             ,model: model
                             ,actions: actions
                             ,main: main};
};