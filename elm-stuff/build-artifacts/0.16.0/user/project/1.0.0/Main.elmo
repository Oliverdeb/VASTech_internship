Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Characteristics = Elm.Characteristics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Html$Lazy = Elm.Html.Lazy.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var emptyModel = {index: 0,servers: _U.list([])};
   var newServer = function (n) {
      return {model: $Characteristics.init
             ,name: A2($Basics._op["++"],"Server ",$Basics.toString(n))
             ,id: n};
   };
   var update = F2(function (action,model) {
      var _p0 = action;
      switch (_p0.ctor)
      {case "NoOp": return model;
         case "AddServer": return _U.update(model,
           {index: model.index + 1
           ,servers: A2($Basics._op["++"],
           model.servers,
           _U.list([newServer(model.index)]))});
         case "RemoveServer": return _U.update(model,
           {servers: A2($List.filter,
           function (s) {
              return !_U.eq(s.id,_p0._0);
           },
           model.servers)});
         default: var updateServer = function (server) {
              return _U.eq(server.id,_p0._0) ? _U.update(server,
              {model: A2($Characteristics.update,
              _p0._1,
              server.model)}) : server;
           };
           return _U.update(model,
           {servers: A2($List.map,updateServer,model.servers)});}
   });
   var NoOp = {ctor: "NoOp"};
   var actions = $Signal.mailbox(NoOp);
   var model = A3($Signal.foldp,update,emptyModel,actions.signal);
   var ModifyServer = F2(function (a,b) {
      return {ctor: "ModifyServer",_0: a,_1: b};
   });
   var showServer = F2(function (address,server) {
      return A2($Characteristics.view,
      A2($Signal.forwardTo,address,ModifyServer(server.id)),
      server.model);
   });
   var showServers = F2(function (address,servers) {
      return A2($Html.div,
      _U.list([]),
      A2($List.map,showServer(address),servers));
   });
   var AddServer = {ctor: "AddServer"};
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([]),
      _U.list([$Html.text("hello")
              ,A3($Html$Lazy.lazy2,showServers,address,model.servers)
              ,A2($Html.button,
              _U.list([A2($Html$Events.onClick,address,AddServer)]),
              _U.list([$Html.text("Add Server")]))]));
   });
   var main = A2($Signal.map,view(actions.address),model);
   var RemoveServer = function (a) {
      return {ctor: "RemoveServer",_0: a};
   };
   var Server = F3(function (a,b,c) {
      return {model: a,name: b,id: c};
   });
   var Model = F2(function (a,b) {
      return {index: a,servers: b};
   });
   return _elm.Main.values = {_op: _op
                             ,Model: Model
                             ,Server: Server
                             ,RemoveServer: RemoveServer
                             ,AddServer: AddServer
                             ,ModifyServer: ModifyServer
                             ,NoOp: NoOp
                             ,newServer: newServer
                             ,emptyModel: emptyModel
                             ,update: update
                             ,view: view
                             ,showServers: showServers
                             ,showServer: showServer
                             ,model: model
                             ,actions: actions
                             ,main: main};
};