Elm.Fields = Elm.Fields || {};
Elm.Fields.make = function (_elm) {
   "use strict";
   _elm.Fields = _elm.Fields || {};
   if (_elm.Fields.values) return _elm.Fields.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Decoder = Elm.Decoder.make(_elm),
   $Html = Elm.Html.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var update = F2(function (action,model) {
      var _p0 = action;
      switch (_p0.ctor)
      {case "NoOp": return model;
         case "AddField": return model;
         case "UpdateFieldValue": var updateField = function (field) {
              return _U.eq(field.name,_p0._0) ? _U.update(field,
              {name: _p0._1}) : field;
           };
           return A2($List.map,updateField,model);
         default: return A2($List.filter,
           function (field) {
              return !_U.eq(field.name,_p0._0);
           },
           model);}
   });
   var init = _U.list([]);
   var basicTypes = _U.list(["String","Int"]);
   var displayFields = F2(function (address,field) {
      return A2($List.member,field.kind,basicTypes) ? A2($Html.h2,
      _U.list([]),
      _U.list([$Html.text(field.name)])) : A2($Html.h2,
      _U.list([]),
      _U.list([$Html.text(field.name)]));
   });
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([]),
      A2($List.map,displayFields(address),model));
   });
   var UpdateFieldValue = F2(function (a,b) {
      return {ctor: "UpdateFieldValue",_0: a,_1: b};
   });
   var RemoveField = function (a) {
      return {ctor: "RemoveField",_0: a};
   };
   var AddField = {ctor: "AddField"};
   var NoOp = {ctor: "NoOp"};
   return _elm.Fields.values = {_op: _op
                               ,init: init
                               ,update: update
                               ,view: view};
};