Elm.Fields = Elm.Fields || {};
Elm.Fields.make = function (_elm) {
   "use strict";
   _elm.Fields = _elm.Fields || {};
   if (_elm.Fields.values) return _elm.Fields.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Decoder = Elm.Decoder.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var fromJust = function (x) {
      var _p0 = x;
      if (_p0.ctor === "Just") {
            return _p0._0;
         } else {
            return _U.crashCase("Fields",
            {start: {line: 94,column: 14},end: {line: 96,column: 53}},
            _p0)("error: fromJust Nothing");
         }
   };
   var newField = function (kind$) {
      return {name: "New field",kind: kind$,repeated: false};
   };
   var update = F2(function (action,model) {
      var _p2 = action;
      switch (_p2.ctor)
      {case "NoOp": return model;
         case "AddField": return A2($Basics._op["++"],
           model,
           _U.list([newField(_p2._0)]));
         case "UpdateFieldValue": return model;
         default: return A2($List.filter,
           function (field) {
              return !_U.eq(field.name,_p2._0);
           },
           model);}
   });
   var init = _U.list([]);
   var basicTypes = _U.list(["String","Int"]);
   var UpdateFieldValue = F2(function (a,b) {
      return {ctor: "UpdateFieldValue",_0: a,_1: b};
   });
   var RemoveField = function (a) {
      return {ctor: "RemoveField",_0: a};
   };
   var AddField = function (a) {
      return {ctor: "AddField",_0: a};
   };
   var displayFields = F2(function (address,field) {
      return A2($List.member,
      field.kind,
      basicTypes) ? field.repeated ? A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.p,
              _U.list([]),
              _U.list([$Html.text(A2($Basics._op["++"],field.name,":"))]))
              ,A2($Html.button,
              _U.list([A2($Html$Events.onClick,
              address,
              RemoveField(field.name))]),
              _U.list([$Html.text(A2($Basics._op["++"],
              " Remove ",
              field.name))]))])) : A2($Html.p,
      _U.list([]),
      _U.list([$Html.text(A2($Basics._op["++"],
      field.name,
      ":"))])) : field.repeated ? A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.p,
              _U.list([]),
              _U.list([$Html.text(A2($Basics._op["++"],field.name,":"))]))
              ,A2($Html.button,
              _U.list([A2($Html$Events.onClick,
              address,
              RemoveField(field.name))]),
              _U.list([$Html.text(A2($Basics._op["++"],
              " Remove ",
              field.name))]))
              ,A2($Html.button,
              _U.list([A2($Html$Events.onClick,
              address,
              AddField(field.kind))]),
              _U.list([$Html.text(A2($Basics._op["++"]," Add ",field.name))]))
              ,A2(displayTypeFields,address,field.kind)])) : A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.p,
              _U.list([]),
              _U.list([$Html.text(A2($Basics._op["++"],field.name,":"))]))
              ,A2(displayTypeFields,address,field.kind)]));
   });
   var displayTypeFields = F2(function (address,kind) {
      return A2($Html.div,
      _U.list([]),
      A2($List.map,
      displayFields(address),
      fromJust($List.head($Decoder.getDataType(kind))).fields));
   });
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([]),
      A2($List.map,displayFields(address),model));
   });
   var NoOp = {ctor: "NoOp"};
   return _elm.Fields.values = {_op: _op
                               ,init: init
                               ,update: update
                               ,view: view};
};